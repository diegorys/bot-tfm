service: tfm
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.8
  environment:
    STAGE: "${sls:stage}"
    GPT3_ENGINE: "text-davinci-002"
    OPENAI_API_KEY: ${self:custom.env.OPENAI_API_KEY.${sls:stage}, ''}
    TELEGRAM_TOKEN: ${self:custom.env.TELEGRAM_TOKEN.${sls:stage}, ''}
    GOOGLE_APPLICATION_CREDENTIALS: "/credentials/google/key.json"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-dialogs"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-users"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-status"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-medication-user"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-medical-appointments"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-events"
plugins:
  - serverless-python-requirements
package:
  individually: true
  patterns:
    - "!**/*"
    - "!*.py"
    - "src/**/*.py"
    - "src/**/*.json"    
    - boto3
    - google-cloud-dialogflow
    - python-telegram-bot

functions:
  telegram:
    handler: src/interfaces/telegram_webhook.handle
    events:
      - httpApi:
          path: /telegram
          method: post
  events:
    handler: src/interfaces/event_bridge.handle
    events:
      - schedule: rate(10 minutes)
      # - httpApi:
      #     path: /events
      #     method: get
  inactivity:
    handler: src/applications/inactivity/api_aws_lambda/handler.handle
    events:
      - schedule: rate(10 minutes)
      # - httpApi:
      #     path: /events
      #     method: get
  # notify:
  #   handler: src/notifications/infrastructure/aws_telegram_notifications.handle
custom:
  env:
    OPENAI_API_KEY: 
      test: "***REMOVED***" # Diego de pago
      prod: "***REMOVED***"
    TELEGRAM_TOKEN:
      test: "***REMOVED***"
      prod: "***REMOVED***"
resources:
  Resources:
    DialogsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-dialogs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StatusTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-status
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MedicationUserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-medication-user
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MedicalAppointmentsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-medical-appointments
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EventsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${sls:stage}-events
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1