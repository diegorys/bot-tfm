service: tfm
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.8
  environment:
    DIALOGS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-dialogs"
    GPT3_ENGINE: "text-ada-001"
    # GPT3_ENGINE: "text-davinci-002"
    OPENAI_API_KEY: "***REMOVED***"
    TELEGRAM_TOKEN: "***REMOVED***"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DIALOGS_TABLE}"

plugins:
  - serverless-python-requirements
package:
  exclude:
    - "**/*"
  include:
    - "*.py"
    - "actions/*.py"
    - "aws/*.py"
    - "domain/*.py"
    - "infrastructure/**/*.py"
    - boto3
    - openai
    - python-telegram-bot

functions:
  telegram:
    handler: aws/telegram.handle
    events:
      - httpApi:
          path: /telegram
          method: post
custom:
  pythonRequirements:
    zip: true
resources:
  Resources:
    DialogsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.DIALOGS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
