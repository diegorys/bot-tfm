# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tfm
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.8
  environment:
    DIALOGS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-dialogs"

plugins:
  - serverless-python-requirements

stage: test
region: eu-west-1

# iamRoleStatements:
#   - Effect: Allow
#     Action:
#       - dynamodb:Query
#       - dynamodb:Scan
#       - dynamodb:GetItem
#       - dynamodb:PutItem
#       - dynamodb:UpdateItem
#       - dynamodb:DeleteItem
#     Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}"

# you can define service wide environment variables here
# environment:
#   OPENAI_API_KEY: x
#   TELEGRAM_TOKEN: x

package:
  exclude:
    - "**/*"
  include:
    - "*.py"
    - "actions/*.py"
    - "aws/*.py"
    - "domain/*.py"
    - "infrastructure/**/*.py"
    - openai
    - python-telegram-bot

functions:
  ping:
    handler: aws/ping.handle
    package:
      include:
        - aws/ping.py
  dialogs:
    handler: aws/dialogs.handle
    events:
      - httpApi:
          path: /admin/dialogs
          method: get
    package:
      include:
        - aws/dialogs.py
  hello:
    handler: aws/hello.handle
    package:
      include:
        - aws/handler.py
        - openai
  telegram:
    handler: aws/telegram.handle
    events:
      - httpApi:
          path: /telegram
          method: post
#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DialogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DIALOGS_TABLE}
        AttributeDefinitions:
          - AttributeName: userid
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: userid
            KeyType: HASH
          - AttributeName: date
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
