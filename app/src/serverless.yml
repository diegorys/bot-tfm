service: tfm
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.8
  environment:
    DIALOGS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-dialogs"

plugins:
  - serverless-python-requirements

stage: test
region: eu-west-1

iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      - dynamodb:DescribeStream
      - dynamodb:GetRecords
      - dynamodb:GetShardIterator
      - dynamodb:ListStreams
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.DIALOGS_TABLE}"

# environment:
#   OPENAI_API_KEY: x
#   TELEGRAM_TOKEN: x

package:
  exclude:
    - "**/*"
  include:
    - "*.py"
    - "actions/*.py"
    - "aws/*.py"
    - "domain/*.py"
    - "infrastructure/**/*.py"
    - boto3
    - openai
    - python-telegram-bot

functions:
  ping:
    handler: aws/ping.handle
    package:
      include:
        - aws/ping.py
  dialogs:
    handler: aws/dialogs.handle
    events:
      - httpApi:
          path: /admin/dialogs
          method: get
    package:
      include:
        - aws/dialogs.py
  hello:
    handler: aws/hello.handle
    package:
      include:
        - aws/handler.py
        - openai
  telegram:
    handler: aws/telegram.handle
    events:
      - httpApi:
          path: /telegram
          method: post
custom:
  pythonRequirements:
    zip: true
resources:
  Resources:
    DialogsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DIALOGS_TABLE}
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: date
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
